//mark.lawrence
//app.module.js

(function () {
    angular.module('app',
        [
            //application modules
            'app.core',
            'app.service',
            'app.filter',

            //feature areas
            'app.nav',
            'app.users',
            'app.tax',
            'app.template',
            'app.mailers',
            'app.events'
        ]);
})();
//core.module.js
//mark.lawrence

(function () {
    angular.module('app.core',
        [
            //angular modules
            'ngMessages',
            'angularLocalStorage',
            'ngRoute',
            'ngAnimate',

            //custom modules
            'blocks.logger',
            'blocks.exception',

            //third party modules
            'smart-table',
            'ui.bootstrap',
            'ngTagsInput',
            'ngFileUpload',
            'rzModule',
            'switcher',
            'gfl.textAvatar',
            'textAngular'
        ])
        .constant('toastr', toastr)
        .constant('moment', moment);;
})();
//config.js
//mark.lawrence
(function () {
    function toastrConfig(toastr) {
        toastr.options.timeOut = 4000;
        toastr.options.positionClass = 'toast-bottom-right';
    };

    var keyCodes = {
        backspace: 8,
        tab: 9,
        enter: 13,
        esc: 27,
        space: 32,
        pageup: 33,
        pagedown: 34,
        end: 35,
        home: 36,
        left: 37,
        up: 38,
        right: 39,
        down: 40,
        insert: 45,
        del: 46
    };

    var apiEndPoints = {
        User: 'users',
        Constituent: 'constituent',
        Tax: 'tax',
        Template: 'template',
        Campaign: 'campaign',
        Mailer: 'mailer',
        Reason: 'reason',
        Event: 'event',
        Guest: 'guest'
    };

    var config = {
        appErrorPrefix: '[DG Error] ', //Configure the exceptionHandler decorator
        appTitle: 'DonorGateway',
        version: '1.0.0',
        apiUrl: 'http://' + window.location.host + '/api/',
        keyCodes: keyCodes,
        apiEndPoints: apiEndPoints
    };

    var defaults = {
        EMAIL_SUFFIX: '@splcenter.org',
        GENERIC_PASSWORD: '1P@ssword'
    };

    angular.module('app.core')
        .config(toastrConfig)
        .constant('config', config)
        .value('defaults', defaults);
})();
//mark.lawrence
//exception.module.js

(function () {
    angular.module('blocks.exception', ['blocks.logger']);
})();
(function () {
    'use strict';

    angular.module('blocks.logger', []);
})();
//mark.lawrence
//event.module.js

(function () {
    angular.module('app.events', [])
        .config(function ($routeProvider, $locationProvider) {
            $locationProvider.html5Mode(true);
            $routeProvider.when('/events',
                {
                    templateUrl: 'app/events/views/home.html',
                    caseInsensitiveMatch: true
                });
        })
        .run([
            '$rootScope', 'logger', function ($rootScope, logger) {
                $rootScope.$on('$locationChangeStart',
                    function (event, next, current) {
                        //HACK: Route to MVC routing if not Events url
                        if (!next.endsWith("Events")) window.location = next;
                    });
            }
        ]);
})();
//filter.module.js
//mark.lawrence

(function () {
    angular.module('app.filter', []);
})();
//mark.lawrence
//mailers.module.js

(function () {
    angular.module('app.mailers', []);
})();
//mark.lawrence
//nav.module.js

(function () {
    angular.module('app.nav', []);
})();
//service.module.js
//mark.lawrence

(function () {
    angular.module('app.service', []);
})();
//tax.module.js
//mark.lawrence

(function () {
    angular.module('app.tax', []);
})();
//mark.lawrence
//template.module.js

(function () {
    (function () {
        angular.module('app.template', []);
    })();
})();
(function () {
    'use strict';

    angular.module('app.users', []);
})();
//mark.lawrence
//exception-handler.provider.js

// Include in index.html so that app level exceptions are handled.
// Exclude from testRunner.html which should run exactly what it wants to run
(function () {
    'use strict';

    angular
        .module('blocks.exception')
        .provider('exceptionHandler', exceptionHandlerProvider)
        .config(config);

    /**
     * Must configure the exception handling
     * @return {[type]}
     */
    function exceptionHandlerProvider() {
        /* jshint validthis:true */
        this.config = {
            appErrorPrefix: undefined
        };

        this.configure = function (appErrorPrefix) {
            this.config.appErrorPrefix = appErrorPrefix;
        };

        this.$get = function () {
            return { config: this.config };
        };
    };

    /**
     * Configure by setting an optional string value for appErrorPrefix.
     * Accessible via config.appErrorPrefix (via config value).
     * @param  {[type]} $provide
     * @return {[type]}
     * @ngInject
     */
    function config($provide) {
        $provide.decorator('$exceptionHandler', extendExceptionHandler);
    };

    /**
     * Extend the $exceptionHandler service to also display a toast.
     * @param  {Object} $delegate
     * @param  {Object} exceptionHandler
     * @param  {Object} logger
     * @return {Function} the decorated $exceptionHandler service
     */
    function extendExceptionHandler($delegate, exceptionHandler, logger) {
        return function (exception, cause) {
            var appErrorPrefix = exceptionHandler.config.appErrorPrefix || '';
            var errorData = { exception: exception, cause: cause };
            exception.message = appErrorPrefix + exception.message;
            $delegate(exception, cause);
            /**
             * Could add the error to a service's collection,
             * add errors to $rootScope, log errors to remote web server,
             * or log locally. Or throw hard. It is entirely up to you.
             * throw exception;
             *
             * @example
             *     throw { message: 'error message we added' };
             */
            logger.error(exception.message, errorData);
        };
    };
})();
//mark.lawrence
//exception.js

(function () {
    'use strict';

    angular
        .module('blocks.exception')
        .factory('exception', exception);

    /* @ngInject */
    function exception(logger) {
        var service = {
            catcher: catcher
        };

        return service;

        function catcher(message) {
            return function (reason) {
                logger.error(message, reason);
            };
        };
    };
})();
//mark.lawrence
//logger.js

(function () {
    'use strict';

    angular.module('blocks.logger').factory('logger', logger);

    logger.$inject = ['$log', 'toastr'];

    function logger($log, toastr) {
        var service = {
            showToasts: true,

            error: error,
            info: info,
            success: success,
            warning: warning,

            // straight to console; bypass toastr
            log: $log.log
        };

        return service;
        /////////////////////

        function error(message, data, title) {
            toastr.error(message, title);
            $log.error('Error: ' + message, data);
        };

        function info(message, data, title) {
            toastr.info(message, title);
            $log.info('Info: ' + message, data);
        };

        function success(message, data, title) {
            toastr.success(message, title);
            $log.info('Success: ' + message, data);
        };

        function warning(message, data, title) {
            toastr.warning(message, title);
            $log.warn('Warning: ' + message, data);
        };
    };
})();
//mark.lawrence
//clear-key.directive.js

(function () {
    angular.module('app').directive("clearKey", function () {
        return {
            restrict: 'EA',
            require: 'ngModel',
            link: function (scope, el, attrs, ctrl) {
                el.on('keydown', function (event) {
                    if (event.which !== 27) { return; } // check key how you want
                    ctrl.$setViewValue(null);
                    ctrl.$render();
                    scope.$apply();
                });
            }
        };
    });
})();
//mark.lawrence
//smart-table.clearKey.js

(function () {
    angular.module('app').directive("stClearKey", function () {
        return {
            restrict: 'EA',
            require: '^stTable',
            link: function (scope, element, attrs, ctrl) {
                element.on('keydown', function (event) {
                    if (event.which !== 27) { return; } // check key how you want
                    return scope.$apply(function () {
                        var fieldName = element.context.attributes['st-search'].value;
                        var tableState = ctrl.tableState();
                        tableState.search.predicateObject[fieldName] = '';
                        return ctrl.pipe();
                    });
                });
            }
        };
    });
})();
(function() {


    var app = angular.module('app');

    app.directive('toggleCheckbox', function($timeout) {

        /**
     * Directive
     */
        return {
            restrict: 'A',
            transclude: true,
            replace: false,
            require: 'ngModel',
            link: function($scope, $element, $attr, ngModel) {

                // update model from Element
                var updateModelFromElement = function() {
                    // If modified
                    var checked = $element.prop('checked');
                    if (checked != ngModel.$viewValue) {
                        // Update ngModel
                        ngModel.$setViewValue(checked);
                        $scope.$apply();
                    }
                };

                // Update input from Model
                var updateElementFromModel = function(newValue) {
                    $element.trigger('change');
                };

                // Observe: Element changes affect Model
                $element.on('change', function() {
                    updateModelFromElement();
                });

                $scope.$watch(function() {
                    return ngModel.$viewValue;
                }, function(newValue) {
                    updateElementFromModel(newValue);
                }, true);

                // Initialise BootstrapToggle
                $element.bootstrapToggle();
            }
        };
    });
})();
//mark.lawrence
//events.js

(function () {
    'use strict';

    var controllerId = 'EventController';

    angular.module('app.events').controller(controllerId, mainController);

    mainController.$inject = ['logger', 'eventService', 'guestService'];

    function mainController(logger, service, guestService) {
        var vm = this;
        vm.title = 'Event Manager';
        vm.description = "Manage Donor Events";

        vm.events = [];
        vm.isBusy = true;
        vm.tabs = [
            { title: 'Details', template: 'app/events/views/home.html', active: true },
            { title: 'Guest List', template: 'app/events/views/guest-list.html', active: true },
            { title: 'Waiting List', template: 'app/events/views/wait-list.html', active: false },
            { title: 'Ticket Queue', template: 'app/events/views/ticket-list.html', active: false },
            { title: 'Template', template: 'app/events/views/ticket-list.html', active: false }
        ];

        activate();

        function activate() {
            logger.log(controllerId + ' activated');
            getEvents();
        }

        vm.addToTicketQueue = function (guest) {
            guest.isWaiting = false;
            guest.isAttending = true;
            guestService.update(guest)
                .then(function (data) {
                    logger.log('added guest', data);
                });
        }

        vm.changeEvent = function () {
            if (!vm.selectedEvent) return;
            vm.currentDate = new Date();
            service.getById(vm.selectedEvent.id)
                .then(function (data) {
                    angular.extend(vm.selectedEvent, data);
                    logger.log('utc', moment.utc(vm.selectedEvent.startDate));
                    vm.selectedEvent.startDate = moment(vm.selectedEvent.startDate).toDate();
                    vm.selectedEvent.endDate = moment(vm.selectedEvent.endDate).toDate();
                    vm.selectedEvent.venueOpenDate = moment(vm.selectedEvent.venueOpenDate).toDate();
                    vm.selectedEvent.registrationCloseDate = moment(vm.selectedEvent.registrationCloseDate).toDate();

                    vm.guests = [].concat(vm.selectedEvent.guests);
                });
        }

        vm.createEvent = function () {
            logger.log('create event', vm.newEvent);
            service.create(vm.newEvent)
                .then(function (data) {
                    vm.selectedEvent = data;
                    vm.events.push(vm.selectedEvent);
                    logger.success('Created new event: ' + data.name);
                }).finally(function () {
                    vm.newEvent = {};
                });
        }

        vm.delete = function (id) {
            service.remove(id)
                .then(function (data) {
                    vm.selectedEvent = null;
                });
        }

        vm.issueTicket = function (guest) {
            guest.ticketIssued = true;

            guestService.update(guest)
                .then(function (data) {
                    angular.extend(guest, data);
                });
        }

        vm.save = function () {
            vm.isBusy = true;
            vm.selectedEvent.startDate = moment.utc(vm.selectedEvent.startDate);
            vm.selectedEvent.endDate = moment.utc(vm.selectedEvent.endDate);
            vm.selectedEvent.venueOpenDate = moment.utc(vm.selectedEvent.venueOpenDate);
            vm.selectedEvent.registrationCloseDate = moment.utc(vm.selectedEvent.registrationCloseDate);

            service.update(vm.selectedEvent)
                .then(function (data) {
                    //angular.extend(vm.selectedEvent, data);
                    logger.success('Saved Event: ' + data.name);
                })
                .finally(function () {
                    vm.isBusy = false;
                });
        }

        vm.toggleCancel = function () {
            vm.selectedEvent.isCancelled = !vm.selectedEvent.isCancelled;
            vm.save();
        }

        function getEvents() {
            service.get()
                .then(function (data) {
                    vm.events = data;
                    //TODO: Remove this. Debugging only
                    vm.selectedEvent = vm.events[0];
                    vm.changeEvent();
                }).finally(function () {
                    vm.isBusy = false;
                });
        }
    };
})();
//app.filter.js
//mark.lawrence

angular.module('app.filter').filter('percentage', ['$filter', function ($filter) {
    return function (input, decimals) {
        return $filter('number')(input * 100, decimals) + '%';
    };
}]);

angular.module('app.filter', []).filter('checkmark', function () {
    return function (input) {
        return input ? '\u2713' : '\u2718';
    };
});

angular.module('app.filter').filter('yesNo', function () {
    return function (input) {
        return input ? 'Yes' : 'No';
    }
});

angular.module('app.filter').filter('updateStatus', function () {
    return function (input) {
        if (input === 1) {
            return 'Unchanged';
        }
        if (input === 2) {
            return 'Changed';
        }
        if (input === 6) {
            return 'Reconciled';
        }
    };
});
//mark.lawrence
//mailers.js

(function () {
    var controllerId = 'MailerController';

    angular.module('app.mailers').controller(controllerId, MainController);

    MainController.$inject = ['logger', '$uibModal', 'campaignService', 'reasonService', 'mailerService'];

    function MainController(logger, $modal, campaignService, reasonService, mailerService) {
        var vm = this;
        var tableStateRef;

        vm.title = 'Mailers Manager';
        vm.description = "Update Mailer Acquisition Data";

        vm.campaigns = [];
        vm.reasons = [];
        vm.currentEdit = {};
        vm.itemToEdit = {};

        vm.mailers = [];
        vm.searchModel = {
            page: 1,
            pageSize: 10,
            orderBy: 'campaignId',
            orderDirection: 'desc',
            suppress: false
        };
        vm.supress = false;
        //vm.downloadCsv = downloadCsv;
        vm.isBusy = false;

        activate();

        function activate() {
            logger.log(controllerId + ' activated');
            getCampaigns();
            getReasons();
        }

        vm.cancelEdit = function (id) {
            vm.currentEdit[id] = false;
        };

        vm.editItem = function (item) {
            vm.currentEdit[item.id] = true;
            angular.copy(item, vm.itemToEdit = {});
        }

        vm.paged = function paged(pageNum) {
            vm.lastDeleted = null;
            vm.lastUpdated = null;
            vm.search(tableStateRef);
        };

        vm.save = function (item) {
            vm.currentEdit[item.id] = false;
            vm.itemToEdit.suppress = true;
            mailerService.update(vm.itemToEdit)
                .then(function (data) {
                    angular.extend(item, data);
                    logger.success('Suppressed ' + item.finderNumber);
                });
        }

        vm.search = function (tableState) {
            tableStateRef = tableState;

            if (typeof (tableState.sort.predicate) != "undefined") {
                vm.searchModel.orderBy = tableState.sort.predicate;
                vm.searchModel.orderDirection = tableState.sort.reverse ? 'desc' : 'asc';
            }
            if (typeof (tableState.search.predicateObject) != "undefined") {
                vm.searchModel.firstName = tableState.search.predicateObject.firstName;
                vm.searchModel.lastName = tableState.search.predicateObject.lastName;
                vm.searchModel.address = tableState.search.predicateObject.address;
                vm.searchModel.city = tableState.search.predicateObject.city;
                vm.searchModel.state = tableState.search.predicateObject.state;
                vm.searchModel.zipcode = tableState.search.predicateObject.zipcode;
                vm.searchModel.finderNumber = tableState.search.predicateObject.finderNumber;
                vm.searchModel.sourceCode = tableState.search.predicateObject.sourceCode;
                vm.searchModel.campaignId = tableState.search.predicateObject.campaignId;
                vm.searchModel.reasonId = tableState.search.predicateObject.reasonId;
            }

            vm.isBusy = true;
            mailerService.query(vm.searchModel)
                .then(function (data) {
                    vm.mailers = data.items;
                    vm.searchModel = data;
                    vm.isBusy = false;
                });
        }

        vm.filterSuppress = function () {
            vm.search(tableStateRef);
        }

        function getCampaigns() {
            campaignService.get()
                .then(function (data) {
                    vm.campaigns = data;
                });
        }

        function getReasons() {
            reasonService.get()
                .then(function (data) {
                    vm.reasons = data;
                });
        }
    }
})();
//mark.lawrence
//nav.js

(function () {
    'use strict';

    var controllerId = 'NavController';

    angular.module('app.nav').controller(controllerId, mainController);

    mainController.$inject = ['logger'];

    function mainController(logger) {
        var vm = this;

        activate();

        function activate() {
            logger.log(controllerId + ' activated');
            vm.user = JSON.parse(localStorage.getItem('currentUser'));
        }
    };
})();
//mark.lawrence
//campaign.service.js

(function () {
    'use strict';

    var serviceId = 'campaignService';
    angular.module('app.service').factory(serviceId, serviceController);

    function serviceController(logger, $http, config) {
        logger.log(serviceId + ' loaded');
        var url = config.apiUrl + config.apiEndPoints.Campaign;

        var service = {
            get: get,
            update: update,
            query: query
            //            remove: remove,
            //            save: save,
            //            search: search,
        }

        return service;

        function get() {
            return $http.get(url)
                .then(function (response) {
                    return response.data;
                });
        }

        function query(name) {
            return $http.get(url + '/' + name)
                .then(function (response) {
                    return response.data;
                });
        }

        function update(template) {
            return $http.put(url, template)
                .then(function (response) {
                    return response.data;
                });
        }
    }
})();
//constituent.service.js
//mark.lawrence

(function () {
    'use strict';

    var serviceId = 'constituentService';
    angular.module('app.service').factory(serviceId, serviceController);

    function serviceController(logger, $http, config) {
        logger.log(serviceId + ' loaded');
        var url = config.apiUrl + config.apiEndPoints.Constituent;

        var service = {
            query: query,
            update: update,

            //TODO: Remove???
            remove: remove,
            get: get,
            create: create,
            download: download,
            save: save
        }

        return service;

        function create() {
        }

        function download(vm) {
            vm.allRecords = true;
            return $http.post(URL + '/search', vm)
                .then(function (response) {
                    return response.data;
                });
        }

        function get(id) {
            return $http.get(URL + '/id')
                .then(function (response) {
                    return response.data;
                });
        }

        function query(vm) {
            return $http.post(url + '/search', vm)
              .then(function (response) {
                  return response.data;
              });
        }

        function update(item) {
            return $http.put(url, item)
                .then(function (response) {
                    return response.data;
                });
        }

        function remove() { }

        function save() { }
    }
})();
//mark.lawrence
//event.service.js

(function () {
    'use strict';

    var serviceId = 'eventService';
    angular.module('app.service').factory(serviceId, serviceController);

    function serviceController(logger, $http, config) {
        logger.log(serviceId + ' loaded');
        var url = config.apiUrl + config.apiEndPoints.Event;

        var service = {
            create: create,
            remove: remove,
            get: get,
            getById: getById,
            update: update,
            query: query
            //            remove: remove,
            //            save: save,
            //            search: search,
        }

        return service;

        function create(event) {
            return $http.post(url, event)
                .then(function (response) {
                    return response.data;
                });
        }

        function remove(id) {
            return $http.delete(url + '/' + id).then(_success);
        };

        function get() {
            return $http.get(url)
                .then(function (response) {
                    return response.data;
                });
        }

        function getById(id) {
            return $http.get(url + '/' + id)
                .then(function (response) {
                    return response.data;
                });
        }

        function query(name) {
            return $http.get(url + '/' + name)
                .then(function (response) {
                    return response.data;
                });
        }

        function update(event) {
            return $http.put(url, event)
                .then(function (response) {
                    return response.data;
                });
        }

        function _success(response) {
            return response.data;
        };
    }
})();
//mark.lawrence
//guest.service.js

(function () {
    'use strict';

    var serviceId = 'guestService';
    angular.module('app.service').factory(serviceId, serviceController);

    function serviceController(logger, $http, config) {
        logger.log(serviceId + ' loaded');
        var url = config.apiUrl + config.apiEndPoints.Guest;

        var service = {
            create: create,
            remove: remove,
            get: get,
            getById: getById,
            update: update,
            query: query
        }

        return service;

        function create(event) {
            return $http.post(url, event)
                .then(function (response) {
                    return response.data;
                });
        }

        function remove(id) {
            return $http.delete(url + '/' + id).then(_success);
        };

        function get() {
            return $http.get(url)
                .then(function (response) {
                    return response.data;
                });
        }

        function getById(id) {
            return $http.get(url + '/' + id)
                .then(function (response) {
                    return response.data;
                });
        }

        function query(name) {
            return $http.get(url + '/' + name)
                .then(function (response) {
                    return response.data;
                });
        }

        function update(event) {
            return $http.put(url, event)
                .then(function (response) {
                    return response.data;
                });
        }

        function _success(response) {
            return response.data;
        };
    }
})();
//mark.lawrence
//mailer.service.js

(function () {
    'use strict';

    var serviceId = 'mailerService';
    angular.module('app.service').factory(serviceId, serviceController);

    function serviceController(logger, $http, config) {
        logger.log(serviceId + ' loaded');
        var url = config.apiUrl + config.apiEndPoints.Mailer;

        var service = {
            get: get,
            query: query,
            update: update
            //            remove: remove,
            //            save: save,
            //            search: search,
        }

        return service;

        function get(id) {
            return $http.get(URL + '/id')
                .then(function (response) {
                    return response.data;
                });
        }

        function query(vm) {
            return $http.post(url + '/search', vm)
                .then(function (response) {
                    return response.data;
                });
        }

        function update(item) {
            return $http.put(url, item)
                .then(function (response) {
                    return response.data;
                });
        }
    }
})();
//mark.lawrence
//reason.service.js

(function () {
    'use strict';

    var serviceId = 'reasonService';
    angular.module('app.service').factory(serviceId, serviceController);

    function serviceController(logger, $http, config) {
        logger.log(serviceId + ' loaded');
        var url = config.apiUrl + config.apiEndPoints.Reason;

        var service = {
            get: get,
            update: update,
            query: query
            //            remove: remove,
            //            save: save,
            //            search: search,
        }

        return service;

        function get() {
            return $http.get(url)
                .then(function (response) {
                    return response.data;
                });
        }

        function query(name) {
            return $http.get(url + '/' + name)
                .then(function (response) {
                    return response.data;
                });
        }

        function update(template) {
            return $http.put(url, template)
                .then(function (response) {
                    return response.data;
                });
        }
    }
})();
//tax.service.js
//mark.lawrence

(function () {
    'use strict';

    var serviceId = 'taxService';
    angular.module('app.service').factory(serviceId, serviceController);

    function serviceController(logger, $http, config) {
        logger.log(serviceId + ' loaded');
        var url = config.apiUrl + config.apiEndPoints.Tax;

        var service = {
            create: create,
            remove: remove,
            update: update

            //TODO: Remove ???
            //get: get,
            //query: query,
            //save: save
        }

        function remove(id) {
            return $http.delete(url + '/' + id)
                .then(function (response) {
                    return response.data;
                });
        }

        function create(item) {
            logger.log('item', item);
            logger.log('url', url);
            return $http.post(url, item)
                .then(function (response) {
                    return response.data;
                });
        }

        function update(item) {
            return $http.put(url, item)
                .then(function (response) {
                    return response.data;
                });
        }

        return service;

        function get(id) { }

        function query() {
        }
    }
})();
//template.service.js
//mark.lawrence

(function () {
    'use strict';

    var serviceId = 'templateService';
    angular.module('app.service').factory(serviceId, serviceController);

    function serviceController(logger, $http, config) {
        logger.log(serviceId + ' loaded');
        var url = config.apiUrl + config.apiEndPoints.Template;

        var service = {
            get: get,
            update: update,
            query: query
            //            remove: remove,
            //            save: save,
            //            search: search,
        }

        return service;

        function get() {
            return $http.get(url)
                .then(function (response) {
                    return response.data;
                });
        }

        function query(name) {
            return $http.get(url + '/' + name)
                .then(function (response) {
                    return response.data;
                });
        }

        function update(template) {
            return $http.put(url, template)
                .then(function (response) {
                    return response.data;
                });
        }
    }
})();
//user.service.js
//mark.lawrence

(function () {
    'use strict';

    var serviceId = 'userService';
    angular.module('app.service').factory(serviceId, serviceController);

    function serviceController(logger, $http, config) {
        logger.log(serviceId + ' loaded');
        var url = config.apiUrl + config.apiEndPoints.User;

        var service = {
            availableRoles: availableRoles,
            create: create,
            get: get,
            query: query,
            remove: remove,
            update: update
        }

        return service;

        function availableRoles() {
            return $http.get(url + '/roles').then(_success);
        }

        function create(user) {
            return $http.post(url, user).then(_success, function (error) {
                logger.log('error', error);
            });
        }

        function get() {
            return $http.get(url).then(_success);
        }

        function query(searchTerm) {
            var searchUrl = url + '/search/';

            if (searchTerm != undefined && searchTerm.length > 0) {
                searchUrl += '?' + searchTerm;
            };
            return $http.get(searchUrl).then(_success);
        }

        function update(user) {
            return $http.put(url, user).then(_success);
        }

        function remove(id) {
            return $http.delete(url + '/' + id).then(_success);
        }

        function _success(response) {
            return response.data;
        }
    }
})();
//manager.js
//mark.lawrence

(function () {
    var controllerId = 'TaxController';

    angular.module('app.tax').controller(controllerId, MainController);

    MainController.$inject = ['logger', '$uibModal', 'constituentService'];

    function MainController(logger, $modal, service) {
        var vm = this;
        var tableStateRef;

        vm.title = 'Tax Data Manager';
        vm.description = "Update Tax and Constituent Data";

        vm.people = [];
        vm.searchModel = {
            page: 1,
            pageSize: 15,
            orderBy: 'Name',
            orderDirection: 'desc'
        };

        vm.downloadCsv = downloadCsv;
        vm.isBusy = false;

        vm.updateStatusOptions = [
            { id: null, title: 'All' }, { id: 1, title: 'Unchanged' }, { id: 2, title: 'Changed' },
            { id: 6, title: 'Reconciled' }
        ];

        activate();

        function activate() {
            logger.log(controllerId + ' activated');
        }

        //TODO: Export constituent changes
        function downloadCsv() {
            return service.download(vm.data)
                .then(function (data) {
                    var dataFile = [];
                    _.forEach(data.items,
                        function (item) {
                            dataFile.push({
                                'RecordId': item.id,
                                'LookupID': item.lookupId,
                                'FinderNumber': item.finderNumber,
                                'Name': item.name,
                                'EmailAddress': item.email,
                                'AddressLine1': item.street,
                                'AddressLine2': item.street2,
                                'City': item.city,
                                'State': item.state,
                                'ZIP': item.zipcode
                            });
                        });
                    return dataFile;
                });
        }

        vm.editItem = function (item) {
            $modal.open({
                templateUrl: '/app/tax/views/constituent.html',
                controller: ['logger', '$uibModalInstance', 'constituentService', 'item', EditConstituentController],
                controllerAs: 'vm',
                resolve: {
                    item: function () { return item; }
                }
            }).result.then(function (data) {
                angular.extend(item, data);
                logger.success('Successfully updated ' + item.name);
            });
        }

        vm.paged = function paged(pageNum) {
            vm.lastDeleted = null;
            vm.lastUpdated = null;
            vm.search(tableStateRef);
        };

        vm.search = function (tableState) {
            tableStateRef = tableState;

            if (!vm.searchModel.isPriority) vm.searchModel.isPriority = null;

            if (typeof (tableState.sort.predicate) != "undefined") {
                vm.searchModel.orderBy = tableState.sort.predicate;
                vm.searchModel.orderDirection = tableState.sort.reverse ? 'desc' : 'asc';
            }
            if (typeof (tableState.search.predicateObject) != "undefined") {
                vm.searchModel.name = tableState.search.predicateObject.name;
                vm.searchModel.lookupId = tableState.search.predicateObject.lookupId;
                vm.searchModel.finderNumber = tableState.search.predicateObject.finderNumber;
                vm.searchModel.zipcode = tableState.search.predicateObject.zipcode;
                vm.searchModel.email = tableState.search.predicateObject.email;
                vm.searchModel.phone = tableState.search.predicateObject.phone;
                vm.searchModel.updateStatus = tableState.search.predicateObject.updateStatus;
            }

            vm.isBusy = true;
            service.query(vm.searchModel)
                .then(function (data) {
                    vm.people = data.items;
                    vm.searchModel = data;
                    vm.isBusy = false;
                });
        }

        vm.reconcileItem = function (item) {
            //TODO: Replace with CONSTANTS
            item.updateStatus = 6;
            service.update(item).then(function (response) {
                logger.success('Reconciled ' + item.name);
            });
        }

        vm.showTaxItems = function (constituent) {
            $modal.open({
                templateUrl: '/app/tax/views/taxitems.html',
                controller: ['logger', '$uibModalInstance', 'constituent', 'taxService', TaxItemController],
                controllerAs: 'vm',
                resolve: {
                    constituent: function () { return constituent; }
                }
            });
        }
    }

    function TaxItemController(logger, $modal, constituent, service) {
        var vm = this;
        var currentYear = parseInt(moment().get('Year'));

        vm.selectedYear = currentYear - 1;
        logger.log('selectedYear', vm.selectedYear);

        vm.dateOptions = {
            formatYear: 'yyyy',
            maxDate: new Date('12/30/' + vm.selectedYear),
            minDate: new Date('1/1/' + vm.selectedYear),
            startingDay: 1
        };
        vm.altInputFormats = ['M!/d!/yyyy'];

        vm.years = [];

        vm.minDate = new Date('1/1/' + vm.selectedYear);
        vm.maxDate = new Date('12/30/' + vm.selectedYear);

        vm.addItem = addItem;
        vm.cancelEdit = cancelEdit;
        vm.constituent = constituent;
        vm.deleteItem = deleteItem;
        vm.editItem = editItem;
        vm.itemToEdit = {};
        vm.newItem = {};
        vm.saveItem = saveItem;
        vm.taxItems = constituent.taxItems;
        vm.yearChanged = yearChanged;

        activate();

        function activate() {
            getYears();
        }

        function getYears() {
            for (var i = 0; i < 5; i++) {
                vm.years.push(currentYear - i);
            }
        }

        function addItem() {
            vm.newItem.constituentId = constituent.id;
            vm.newItem.taxYear = moment(vm.newItem.donationDate).year();

            service.create(vm.newItem)
                .then(function (data) {
                    vm.taxItems.push(data);
                    vm.newItem = {};
                    logger.success('Added tax item');
                });
        }

        function cancelEdit() {
            vm.currentEdit = {};
        }

        function deleteItem(item) {
            var idx = vm.taxItems.indexOf(item);
            service.remove(item.id)
                .then(function (data) {
                    vm.taxItems.splice(idx, 1);
                    logger.warning('deleted ' + item.donationDate);
                });
        }

        function editItem(item) {
            vm.currentEdit = {};
            vm.currentEdit[item.id] = true;
            vm.itemToEdit = angular.copy(item);
            vm.itemToEdit.donationDate = moment(vm.itemToEdit.donationDate).toDate();
        }

        function saveItem(item) {
            service.update(vm.itemToEdit)
                .then(function (response) {
                    angular.extend(item, vm.itemToEdit);
                    vm.currentEdit = {};
                    logger.success('Updated tax item ' + moment(item.donationDate).format('MM/dd/yyyy'));
                });
        }

        function yearChanged() {
            vm.dateOptions = {
                maxDate: new Date('12/30/' + vm.selectedYear),
                minDate: new Date('1/1/' + vm.selectedYear)
            };
            vm.newItem.donationDate = vm.dateOptions.minDate;
        }
    }

    function EditConstituentController(logger, $modal, service, item) {
        var vm = this;

        vm.item = angular.copy(item);

        vm.close = function () {
            $modal.dismiss();
        }

        vm.save = function () {
            //TODO: Replace with CONSTANTS
            vm.item.updateStatus = 2;
            service.update(vm.item)
                .then(function (data) {
                    //angular.extend(item, vm.item);
                    $modal.close(vm.item);
                });
        }
    }
})();
//template.js
//mark.lawrence

(function () {
    var controllerId = 'TemplateController';

    angular.module('app.template').controller(controllerId, MainController);

    MainController.$inject = ['logger', 'templateService'];

    function MainController(logger, service) {
        var vm = this;

        vm.title = 'Templates';
        vm.description = 'Update event templates';

        vm.templates = [];
        vm.selectedTemplate = {};

        vm.template = {};
        vm.templateCopy = {};

        activate();

        function activate() {
            logger.log(controllerId + ' activated');
            getTemplates();
        }

        function getTemplates() {
            service.get()
                .then(function (data) {
                    vm.templates = data;
                    logger.log('templates', data);
                });
        }

        vm.fileSelected = function ($files, $file, $event, $rejectedFiles) {
            var reader = new FileReader();
            reader.onload = function (e) {
                var dataURL = reader.result;
                vm.selectedTemplate.image = dataURL.split(',')[1];
                vm.selectedTemplate.mimeType = $file.type;
            };
            reader.readAsDataURL($file);
        };

        vm.save = function () {
            service.update(vm.selectedTemplate)
                .then(function (data) {
                    vm.selectedTemplate = angular.extend(vm.selectedTemplate, data);
                });
        }
    }
})();
(function () {
    'use strict';

    var controllerId = 'UserController';

    angular.module('app.users').controller(controllerId, UserController);

    UserController.$inject = ['logger', 'userService', 'defaults', 'config'];

    function UserController(logger, service, defaults, config) {
        var vm = this;
        vm.title = 'User Manager';
        vm.description = 'Edit and update users';
        var keyCodes = config.keyCodes;

        vm.availableRoles = [];
        vm.clearCreate = clearCreate;
        vm.currentEdit = {};
        vm.isBusy = false;
        vm.lastDeleted = null;
        vm.lastUpdated = null;
        vm.itemToEdit = {};

        vm.user = {
            //userName: null,
            roles: ['user'],
            fullName: '',
            password: defaults.GENERIC_PASSWORD
        };

        var tableStateRef;

        activate();

        function activate() {
            logger.log(controllerId + ' activated');
            getAvailableRoles();
        };

        vm.addItem = function () {
            vm.user.fullName = parseFullName(vm.user.userName);
            vm.user.email = vm.user.userName + defaults.EMAIL_SUFFIX;
            service.create(vm.user)
                .then(function (data) {
                    //TODO: mapping would allow removal of extend method
                    vm.user = angular.extend(vm.user, data);
                    vm.users.unshift(angular.copy(vm.user));
                    logger.success('User ' + vm.user.userName + ' created!');
                    vm.user.userName = null;
                    //TODO: show error user already exists
                });
        };

        vm.cancelEdit = function (id) {
            vm.currentEdit[id] = false;
        };

        vm.deleteItem = function (user) {
            angular.copy(user, vm.lastDeleted = {});
            service.remove(user.id)
                .then(function (data) {
                    var idx = vm.users.indexOf(user);
                    vm.users.splice(idx, 1);
                });
        };

        vm.editItem = function (user) {
            vm.currentEdit[user.id] = true;
            angular.copy(user, vm.itemToEdit = {});
        };

        function getAvailableRoles() {
            service.availableRoles()
                .then(function (data) {
                    vm.availableRoles = data;
                });
        };

        vm.saveItem = function (user) {
            vm.isBusy = true;

            vm.currentEdit[user.id] = false;
            angular.copy(user, vm.lastUpdated = {});
            var roles = [];

            _.forEach(vm.itemToEdit.roles,
                function (role) {
                    roles.push(role.name);
                });
            vm.itemToEdit.roles = roles;

            service.update(vm.itemToEdit)
                .then(function (data) {
                    angular.extend(user, data);
                    logger.success('User ' + data.userName + ' updated!');
                    vm.isBusy = false;
                });
        };

        vm.search = function (tableState) {
            tableStateRef = tableState;
            var searchTerm;

            if (typeof (tableState.search.predicateObject) != 'undefined') {
                searchTerm = tableState.search.predicateObject.searchTerm;
            }

            vm.isBusy = true;
            service.query(searchTerm)
                .then(function (data) {
                    vm.users = data;
                    logger.log('users', vm.users);
                })
                .finally(function () {
                    vm.isBusy = false;
                });
        };

        vm.undoDelete = function () {
            var roles = [];

            _.forEach(vm.lastDeleted.roles, function (role) {
                roles.push(role.name);
                logger.log('role', role.name);
            });
            vm.lastDeleted.roles = roles;
            vm.lastDeleted.password = defaults.GENERIC_PASSWORD;

            service.create(vm.lastDeleted).then(function (data) {
                logger.success('Successfully restored ' + data.userName);
                vm.users.unshift(data);
                vm.lastDeleted = null;
            });
        };

        vm.undoChange = function () {
            vm.isBusy = true;

            service.update(vm.lastUpdated)
                .then(function (data) {
                    angular.forEach(vm.users,
                        function (u, i) {
                            if (u.id === vm.lastUpdated.id) {
                                vm.users[i] = vm.lastUpdated;
                            }
                        });
                    logger.success('Successfully restored ' + data.userName);
                    vm.lastUpdated = null;
                })
                .finally(function () {
                    vm.isBusy = false;
                });
        };

        function clearCreate($event) {
            if ($event.keyCode === keyCodes.esc) {
                vm.user.userName = '';
            };
        };

        function parseFullName(name) {
            var arr = name.split('.');
            var fullname = '';

            _.forEach(arr, function (v) {
                fullname += _.capitalize(v) + ' ';
            });

            return _.trim(fullname);
        };
    };
})();
//# sourceMappingURL=data:application/json;base64,
